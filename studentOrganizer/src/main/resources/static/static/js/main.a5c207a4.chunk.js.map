{"version":3,"sources":["client.js","components/Container.js","components/Footer.js","components/forms/AddStudentForm.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","Container","props","style","width","margin","textAlign","children","Footer","className","numberOfStudents","backgroundColor","marginRight","size","onClick","handleStudentClick","type","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","console","log","onFailure","message","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","description","notification","errorNotification","App","state","students","isFetching","isAddStudentModalVisible","handleOk","setState","handleCancel","showModal","closeModal","fetchStudents","res","this","studentsList","indicator","LoadingOutlined","fontSize","spin","length","columns","title","key","render","text","charAt","toUpperCase","dataIndex","dataSource","rowKey","pagination","visible","onOk","onCancel","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5c207a4.chunk.js","sourcesContent":["import fetch from 'unfetch'\n\nconst checkStatus = response => {\n    if(response.ok) {\n        return response\n    } else {\n        let error = new Error(response.statusText)\n        error.response = response;\n        response.json().then(e => {\n            error.error = e;\n        })\n        return Promise.reject(error)\n    }\n}\n\nexport const getAllStudents = () => fetch('/api/students').then(checkStatus);\n\nexport const addNewStudent = student => fetch('/api/students', {\n    headers: {'Content-Type': 'application/json'},\n    method: 'POST',\n    body: JSON.stringify(student)\n}).then(checkStatus)","import React from 'react'\n\nconst Container = props => (\n    <div style={{width: '1400px', margin: '0 auto' , textAlign: 'center'}}>\n        {props.children}\n    </div>\n)\n\nexport default Container;","import React from 'react';\nimport Container from './Container';\nimport { Button, Avatar } from 'antd';\nimport './Footer.css';\n\nconst Footer = (props) => {\n    return (\n        <div className='footer'>\n            <Container>\n                {props.numberOfStudents ?\n                    <Avatar style={{ backgroundColor: '#f56a00', marginRight: '5px' }}\n                        size='large'>{props.numberOfStudents}</Avatar>\n                    :\n                    null}\n                <Button onClick={() => props.handleStudentClick()} type='primary'>Add new student +</Button>\n            </Container>\n        </div>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport { Formik } from 'formik';\nimport { Input, Button, Tag } from 'antd';\nimport { addNewStudent } from '../../client';\n\nconst inputBottomMargin = { marginBottom: '10px' };\nconst tagStyle = { backgroundColor: '#f50', color: 'white', ...inputBottomMargin };\n\nconst AddStudentForm = (props) =>  {\n\n\n    \n        return (\n            <Formik\n                initialValues={{ firstName: '', lastName: '', email: '', gender: '' }}\n                validate={values => {\n                    const errors = {};\n\n                    if (!values.firstName) {\n                        errors.firstName = 'First Name Required'\n                    }\n\n                    if (!values.lastName) {\n                        errors.lastName = 'Last Name Required'\n                    }\n\n                    if (!values.email) {\n                        errors.email = 'Email Required';\n                    } else if (\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                    ) {\n                        errors.email = 'Invalid email address';\n                    }\n\n                    if (!values.gender) {\n                        errors.gender = 'Gender Required'\n                    } else if (!['MALE', 'FEMALE', 'male', 'female'].includes(values.gender)\n                    ) {\n                        errors.gender = 'Gender must be (MALE, male, FEMALE, female)'\n                    }\n\n                    return errors;\n                }}\n                onSubmit={(student, { setSubmitting }) => {\n\n                    addNewStudent(student).then(() => {\n                        props.onSuccess()\n                    })\n                    .catch(err => {\n                        console.log(JSON.stringify(err))\n                        props.onFailure(err.error.message)\n                    })\n                    .finally(() => {\n                        setSubmitting(false);\n                    })\n                    \n\n                }}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    submitForm,\n                    isValid\n                    /* and other goodies */\n                }) => (\n                        <form onSubmit={handleSubmit}>\n                            <Input\n                                style={inputBottomMargin}\n                                name=\"firstName\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.firstName}\n                                placeholder='First Name'\n                            />\n                            {errors.firstName && touched.firstName && <Tag style={tagStyle}>{errors.firstName}</Tag>}\n                            <Input\n                                style={inputBottomMargin}\n                                name=\"lastName\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.lastName}\n                                placeholder='Last Name'\n                            />\n                            {errors.lastName && touched.lastName && <Tag style={tagStyle}>{errors.lastName}</Tag>}\n                            <Input\n                                style={inputBottomMargin}\n                                name=\"email\"\n                                type='email'\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                                placeholder='Email'\n                            />\n                            {errors.email && touched.email && <Tag style={tagStyle}>{errors.email}</Tag>}\n                            <Input\n                                style={inputBottomMargin}\n                                name=\"gender\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.gender}\n                                placeholder='Gender. E.g Male or Female'\n                            />\n                            {errors.gender && touched.gender && <Tag style={tagStyle}>{errors.gender}</Tag>}\n\n                            <Button\n                                onClick={() => submitForm()}\n                                type=\"submit\"\n                                disabled={isSubmitting || (touched && !isValid)}>\n                                Submit\n          </Button>\n                        </form>\n                    )}\n            </Formik>\n        );\n    \n}\n\nexport default AddStudentForm;","import { notification } from 'antd';\n\nconst openNotification = (type, message, description) => {\n    notification[type]({\n        message,\n        description\n    });\n};\n\nexport const successNotification = (message, description) =>\n    openNotification('success', message, description)\n\nexport const infoNotification = (message, description) =>\n    openNotification('info', message, description)\n\nexport const warningNotification = (message, description) =>\n    openNotification('warning', message, description)\n\nexport const errorNotification = (message, description) =>\n    openNotification('error', message, description)","import React, { Component } from 'react';\nimport { getAllStudents } from './client';\nimport { Table, Avatar, Spin, Modal, Empty, err } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport Container from './components/Container';\nimport Footer from './components/Footer';\nimport AddStudentForm from './components/forms/AddStudentForm';\nimport * as notification from './components/Notification';\n\n\nconst getIndicator = () => <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass App extends Component {\n\n  state = {\n    students: [],\n    isFetching: false,\n    isAddStudentModalVisible: false\n  }\n\n  componentDidMount() {\n    this.fetchStudents()\n  }\n\n  handleOk = () => {\n    this.setState({\n      isAddStudentModalVisible: false\n    })\n  }\n\n  handleCancel = () => {\n    this.setState({\n      isAddStudentModalVisible: false\n    })\n  }\n\n  showModal = () => {\n    this.setState({\n      isAddStudentModalVisible: true\n    })\n  }\n\n  closeModal = () => {\n    this.setState({\n      isAddStudentModalVisible: false\n    })\n  }\n\n\n  fetchStudents = () => {\n    this.setState({\n      isFetching: true\n    })\n    getAllStudents()\n      .then(res => res.json()\n        .then(students => {\n          console.log(students)\n          this.setState({\n            students,\n            isFetching: false\n          })\n\n        }))\n        .catch(error => {\n          const message = error.error.message\n          const description = error.error.error\n          notification.errorNotification(message, description)\n          this.setState({\n            isFetching: false\n          })\n        })\n  }\n\n  render() {\n\n    const { students, isFetching, isAddStudentModalVisible } = this.state\n\n    \n\n    let studentsList = <Empty description={<h1>No students found</h1>}/>\n\n    if(isFetching) {\n      return (\n      <Container >\n        <Spin indicator={getIndicator()}/>\n      </Container>\n      )\n    }\n\n    if (students && students.length) {\n\n      const columns = [\n        {\n          title: '',\n          key: 'avatar',\n          render: (text, student) => (\n            <Avatar size='large'>{`${student.firstName.charAt(0).toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}</Avatar>\n          )\n        },\n        {\n          title: 'StudentId',\n          dataIndex: 'studentId',\n          key: 'studentId'\n        },\n        {\n          title: 'First Name',\n          dataIndex: 'firstName',\n          key: 'firstName'\n        },\n        {\n          title: 'Last Name',\n          dataIndex: 'lastName',\n          key: 'lastName'\n        },\n        {\n          title: 'Email',\n          dataIndex: 'email',\n          key: 'email'\n        },\n        {\n          title: 'Gender',\n          dataIndex: 'gender',\n          key: 'gender'\n        }\n      ];\n\n      studentsList = <Table  style={{marginBottom: '100px'}} dataSource={students} columns={columns} rowKey='studentId' pagination={false} />\n\n    }\n\n    return (\n      <Container>\n\n        {studentsList}\n\n        <Modal\n        title='Add new student'\n        visible={isAddStudentModalVisible}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n        width={1000}\n        >\n        <AddStudentForm \n          onSuccess={() => {\n            this.closeModal();\n            this.fetchStudents();\n            }}\n          onFailure={(err) => {\n            // console.log(JSON.stringify(err))\n            notification.errorNotification(err, 'Try a different email.');\n          }}\n        />\n        </Modal>\n        <Footer numberOfStudents = {students.length} handleStudentClick={this.showModal}/>\n\n      </Container>\n\n\n\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}